[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "By the end of this hands-on, I should be able to:\n\nImport and manage geospatial and aspatial datasets in R.\nExplore and check simple feature data frames using Base R and sf functions.\nAssign and transform coordinate systems.\nPerform data wrangling with dplyr.\nCarry out basic exploratory data analysis (EDA) with ggplot2.\n\n\n\n\nIn this exercise, the first step is to set up a clear folder structure for the project. A main folder (Hands-on_Ex) is created with a subfolder for the exercise (Hands-on_Ex01). Inside it, a data directory is organized into two parts:\n\nGeospatial data: contains shapefiles such as the 2014 Subzone Boundary, Pre-Schools Location, and Cycling Path.\nAspatial data: contains tabular data, specifically the Airbnb listing dataset (listing.csv).\n\nThis organization ensures that both spatial and non-spatial datasets are properly separated and ready to be used in R for analysis.\n\n\n\nThis exercise begins by setting up the essential R packages:\n\nsf ‚Äì for importing, managing, and processing geospatial data.\ntidyverse ‚Äì for data wrangling and visualization. Specifically, it uses:\n\nreadr (CSV import),\ntidyr (data manipulation),\ndplyr (data transformation),\nggplot2 (visualization).\n\n\n\npacman::p_load(sf, tidyverse)\n\nTo load them efficiently, the pacman package is used with p_load(), which installs and loads the required packages into R in one step.\n\n\n\nIn this section, you will learn how to import the following geospatial data into R by using¬†st_read()¬†of¬†sf¬†package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\n\n\n\ndsn must point to the correct folder\n\ndsn should be the path to the folder that contains the .shp, .dbf, .prj, and .shx files.\nIf you only write dsn = \"geospatial/\" but the files are still inside another subfolder (e.g., MasterPlan2014SubzoneBoundaryWebSHP/), you‚Äôll get the error ‚Äúfile doesn‚Äôt seem to exist‚Äù.\n\nlayer must match the shapefile name\n\nIf the shapefile is MP14_SUBZONE_WEB_PL.shp, then use layer = \"MP14_SUBZONE_WEB_PL\".\nDo not include the .shp extension.\n\nOrganize your files properly\n\nIn the course material, the example works directly because all shapefile components are already placed inside the geospatial/ folder.\nIf your files are still inside a nested folder, you need to either:\n\nadjust the dsn to point to that subfolder, or\nmove the .shp/.dbf/.prj/.shx files directly into geospatial/.\n\n\n\n\nmpsz &lt;- st_read(\n  dsn   = \"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\",\n  layer = \"MP14_SUBZONE_WEB_PL\"\n)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWhen using st_read(), always check that your dsn points to the exact folder where the shapefile components are stored, and that the layer matches the shapefile name (without extension). A clean folder structure avoids errors and makes your code simpler.\n\n\n\n\n1.4.2¬†Importing polyline feature data in shapefile form\nThe code chunk below uses¬†st_read()¬†function of¬†sf¬†package to import¬†CyclingPath¬†shapefile into R as line feature data frame.\n\ncyclingpath = st_read(dsn = \"data/geospatial/CyclingPath_Apr2025\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/CyclingPath_Apr2025' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4651 features and 19 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11721.1 ymin: 27550.13 xmax: 42809.37 ymax: 49702.59\nProjected CRS: SVY21\n\n\n\n\n\nThe¬†PreSchoolsLocation¬†is in¬†kml¬†format. The code chunk below will be used to import the kml into R.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nüí° First, carefully examine your dataset\n\n\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n‚ö†Ô∏è Notice that the print only displays basic information of the feature class.\n\n\n\nBesides the basic geometry, each geospatial dataset also contains attribute information stored in the data frame. To quickly explore these attributes, the glimpse() function from dplyr is very handy:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, ‚Ä¶\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, ‚Ä¶\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL‚Ä¶\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",‚Ä¶\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",‚Ä¶\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",‚Ä¶\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",‚Ä¶\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT‚Ä¶\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",‚Ä¶\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",‚Ä¶\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05‚Ä¶\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,‚Ä¶\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,‚Ä¶\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,‚Ä¶\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103‚Ä¶\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (‚Ä¶\n\n\n\n\n\nSometimes we would like to reveal complete information of a feature object, this is the job of¬†head()¬†of Base R\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n\n\n\nplot() provides a quick and easy way to visualise geospatial features, allowing us to inspect spatial patterns alongside their attribute values.\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\nNow, let us plot the preschool layer ontop of the mpsz layer by using the code chunk below.\n\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), \n     add = TRUE)\n\n\n\n\n\n\n\n\nüí° Reminder: If you need high cartographic quality maps, other R packages such as tmap should be used.\n\nAnswer: The preschool points did not overlay on the mpsz layer because the two datasets use different Coordinate Reference Systems (CRS).\n\nmpsz is in SVY21 (EPSG:3414).\nPreschools are in WGS84 (EPSG:4326).\n\nTo fix this, both layers must be transformed to the same CRS before plotting, for example using:\n\nexample_EPSG3414 &lt;- st_transform(preschool, st_crs(mpsz))\n\n\n\n\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\n\n\nThis is an example the coordinate system of¬†mpsz¬†simple feature data frame by using¬†st_crs()¬†of¬†sf¬†package as shown in the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nIn order to assign the correct EPSG code to¬†mpsz¬†data frame,¬†st_set_crs()¬†of¬†sfpackage is used as shown in the code chunk below.\n\nmpsz &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check the CSR again by using the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is 3414 now.\n\n\n\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nLet us perform the projection transformation by using the code chunk below.\n\npreschool &lt;- st_transform(preschool, crs = 3414)\n\nüìí Note:\nIn practice, we need to find out the appropriate project coordinate system to use before performing the projection transformation.\nNext, let us display the content of preschool sf data frame as shown below.\nprint(preschool, n = 0)\nSimple feature collection with 2290 features and 2 fields Geometry type: POINT Dimension: XYZ Bounding box: xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88 z_range: zmin: 0 zmax: 0 Projected CRS: SVY21 / Singapore TM\nNow, let us try to plot the preschool layer ontop of mpsz layer again by using the similar code chunk you used earlier.\n\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nIn practice, it is not unusual that we will come across data such as¬†listing¬†of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\n\n\nSince¬†listings¬†data set is in csv file format, we will use¬†read_csv()¬†of¬†readrpackage to import¬†listing.csv¬†as shown the code chunk below. The output R object is called¬†listings¬†and it is a¬†tibble data frame.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3659 Columns: 18\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nThe code chunk below converts¬†listing¬†data frame into a simple feature data frame by using¬†st_as_sf()of¬†sf¬†packages\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nThings to learn from the arguments above:\n\ncoords: Specify the coordinate columns ‚Äî X (longitude) first, followed by Y (latitude).\n\ncrs: Provide the coordinate reference system in EPSG format.\n\nEPSG:4326 = WGS84 (global geographic coordinate system)\n\nEPSG:3414 = SVY21 (Singapore projected coordinate system)\n\nFor other countries, you can look up EPSG codes at epsg.io.\n\n\n%&gt;% + st_transform(): Used to transform the newly created simple feature data frame into the SVY21 projected coordinate system.\n\nLet us examine the content of this newly created simple feature data frame.\n\nglimpse(listings_sf)\n\nRows: 3,659\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 29‚Ä¶\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", ‚Ä¶\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925‚Ä¶\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",‚Ä¶\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg‚Ä¶\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu‚Ä¶\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat‚Ä¶\n$ price                          &lt;dbl&gt; 143, NA, 76, NA, NA, 85, NA, NA, 41, 79‚Ä¶\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 180, 180, 92,‚Ä¶\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 131, 17, 5, 60, 81,‚Ä¶\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20‚Ä¶\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.14, 0.27, 0.13, 0.10, 0.80, 0.1‚Ä¶\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 58, 58, 7, 58, 58, 5, 7, 7, 1,‚Ä¶\n$ availability_365               &lt;dbl&gt; 90, 79, 90, 153, 153, 365, 153, 153, 36‚Ä¶\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ‚Ä¶\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, \"S039‚Ä¶\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (‚Ä¶\n\n\n\n\nlibrary(sf)\n\nlisting_sf &lt;- st_as_sf(listings,\n                       coords = c(\"longitude\", \"latitude\"),\n                       crs = 4326) %&gt;%\n              st_transform(crs = 3414)\n\nplot(mpsz$geometry)\nplot(listing_sf$geometry,\n     col = \"black\",\n     pch = 20,\n     cex = 0.5,\n     add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nBesides providing functions to handling (i.e.¬†importing, exporting, assigning projection, transforming projection etc) geospatial data,¬†sf¬†package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\nIn this section, we will learn how to answer GIS questions by using geoprocessing functions of sf package.\n\n\n\n\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the existing cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\n\n\n\n¬†st_buffer()¬†of¬†sf¬†package is used to compute the 5-meter buffers around cycling paths.\n\n\nbuffer_cycling &lt;- st_buffer(\n  cyclingpath, dist=5, nQuadSegs = 30)\n\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nIf you are tidyverse person like me, code chunk below should be used.\n\n\nbuffer_cycling &lt;- buffer_cycling %&gt;%\n  mutate(AREA = st_area(geometry))\n\n\n¬†sum()¬†of Base R will be used to derive the total land involved\n\n\nsum(buffer_cycling$AREA)\n\n3561648 [m^2]\n\n\nADDITION:\nWe can also create a plot showing the buffer by a selected planning subzone.\nAssuming that we are interested on the land acquisition in Tampines West planning subzone.\n\n¬†filter()¬†of dplyr package will be used to extract polygon feature of Tampines West by using the code chunk below.\n\n\nmpsz_selected &lt;- mpsz %&gt;%\n  filter(SUBZONE_N == \"TAMPINES WEST\") \n\n\n¬†st_intersection()¬†of¬†sf¬†package will be used to clip cycling buffers within Tampines West planning subzone.\n\n\nst_crs(buffer_cycling) &lt;- 3414\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz_selected) &lt;- 3414\n\nbuffer_cycling_selected &lt;- st_intersection(\n  buffer_cycling, mpsz_selected)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n\n\n¬†plot()¬†of R Graphic will be used to create the plot as shown below.\n\n\n\n\n\n\n\nThe authority requires a count of pre-schools for each planning subzone to support forward planning. Using R and the sf package, perform the necessary geoprocessing to compute these counts and present the results clearly.\n\n\n\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using¬†st_intersects(). Next,¬†length()¬†of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\nüí°Note : st_intersection( ) and ¬†st_intersects() is different.\n\nmpsz$`PreSch Count`&lt;- lengths(st_intersects(mpsz, preschool))\n\nCheck the summary statistics of the newly derived¬†PreSch Count¬†field by using¬†summary()¬†as shown in the code chunk below.\n\nsummary(mpsz$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning subzone with the most number of pre-school, the¬†top_n()¬†of¬†dplyr¬†package is used as shown in the code chunk below.\n\ntop_n(mpsz, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nIn the code chunk below, another geoprocessing function of sf package called¬†st_area()¬†is used to derive the area of each planning subzone.\n\nmpsz$Area &lt;- mpsz %&gt;%\n  st_area()\n\nNext,¬†mutate()¬†of¬†dplyr¬†package is used to compute the density by using the code chunk below.\n\nmpsz &lt;- mpsz %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nIn this section, we will visualise the derive variables by using appropriate Exploratory data Analysis methods of¬†ggplot2.\nFirstly, we will plot a histogram to reveal the distribution of¬†PreSch Density. Conventionally,¬†hist()¬†of R Graphics will be used as shown in the code chunk below.\n\nhist(mpsz$`PreSch Density`)\n\n\n\n\n\n\n\n\nAlthough the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.\nIn the code chunk below, appropriate¬†ggplot2¬†functions will be used.\n\nggplot(data=mpsz, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning subzones with a single pre-school, on the other hand, \\nthere are seven planning subzones with at least 30 or more pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\nIn the code chunk below, appropriate ggplot2 functions are used to plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\n\nggplot(data=mpsz, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#learning-outcome",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "By the end of this hands-on, I should be able to:\n\nImport and manage geospatial and aspatial datasets in R.\nExplore and check simple feature data frames using Base R and sf functions.\nAssign and transform coordinate systems.\nPerform data wrangling with dplyr.\nCarry out basic exploratory data analysis (EDA) with ggplot2."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#data-preparation",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "In this exercise, the first step is to set up a clear folder structure for the project. A main folder (Hands-on_Ex) is created with a subfolder for the exercise (Hands-on_Ex01). Inside it, a data directory is organized into two parts:\n\nGeospatial data: contains shapefiles such as the 2014 Subzone Boundary, Pre-Schools Location, and Cycling Path.\nAspatial data: contains tabular data, specifically the Airbnb listing dataset (listing.csv).\n\nThis organization ensures that both spatial and non-spatial datasets are properly separated and ready to be used in R for analysis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#getting-started",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "This exercise begins by setting up the essential R packages:\n\nsf ‚Äì for importing, managing, and processing geospatial data.\ntidyverse ‚Äì for data wrangling and visualization. Specifically, it uses:\n\nreadr (CSV import),\ntidyr (data manipulation),\ndplyr (data transformation),\nggplot2 (visualization).\n\n\n\npacman::p_load(sf, tidyverse)\n\nTo load them efficiently, the pacman package is used with p_load(), which installs and loads the required packages into R in one step."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#importing-geospatial-data",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "In this section, you will learn how to import the following geospatial data into R by using¬†st_read()¬†of¬†sf¬†package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\n\n\n\ndsn must point to the correct folder\n\ndsn should be the path to the folder that contains the .shp, .dbf, .prj, and .shx files.\nIf you only write dsn = \"geospatial/\" but the files are still inside another subfolder (e.g., MasterPlan2014SubzoneBoundaryWebSHP/), you‚Äôll get the error ‚Äúfile doesn‚Äôt seem to exist‚Äù.\n\nlayer must match the shapefile name\n\nIf the shapefile is MP14_SUBZONE_WEB_PL.shp, then use layer = \"MP14_SUBZONE_WEB_PL\".\nDo not include the .shp extension.\n\nOrganize your files properly\n\nIn the course material, the example works directly because all shapefile components are already placed inside the geospatial/ folder.\nIf your files are still inside a nested folder, you need to either:\n\nadjust the dsn to point to that subfolder, or\nmove the .shp/.dbf/.prj/.shx files directly into geospatial/.\n\n\n\n\nmpsz &lt;- st_read(\n  dsn   = \"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\",\n  layer = \"MP14_SUBZONE_WEB_PL\"\n)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWhen using st_read(), always check that your dsn points to the exact folder where the shapefile components are stored, and that the layer matches the shapefile name (without extension). A clean folder structure avoids errors and makes your code simpler.\n\n\n\n\n1.4.2¬†Importing polyline feature data in shapefile form\nThe code chunk below uses¬†st_read()¬†function of¬†sf¬†package to import¬†CyclingPath¬†shapefile into R as line feature data frame.\n\ncyclingpath = st_read(dsn = \"data/geospatial/CyclingPath_Apr2025\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/CyclingPath_Apr2025' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4651 features and 19 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11721.1 ymin: 27550.13 xmax: 42809.37 ymax: 49702.59\nProjected CRS: SVY21\n\n\n\n\n\nThe¬†PreSchoolsLocation¬†is in¬†kml¬†format. The code chunk below will be used to import the kml into R.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "üí° First, carefully examine your dataset\n\n\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n‚ö†Ô∏è Notice that the print only displays basic information of the feature class.\n\n\n\nBesides the basic geometry, each geospatial dataset also contains attribute information stored in the data frame. To quickly explore these attributes, the glimpse() function from dplyr is very handy:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, ‚Ä¶\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, ‚Ä¶\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL‚Ä¶\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",‚Ä¶\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",‚Ä¶\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",‚Ä¶\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",‚Ä¶\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT‚Ä¶\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",‚Ä¶\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",‚Ä¶\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05‚Ä¶\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,‚Ä¶\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,‚Ä¶\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,‚Ä¶\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103‚Ä¶\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (‚Ä¶\n\n\n\n\n\nSometimes we would like to reveal complete information of a feature object, this is the job of¬†head()¬†of Base R\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "plot() provides a quick and easy way to visualise geospatial features, allowing us to inspect spatial patterns alongside their attribute values.\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\nNow, let us plot the preschool layer ontop of the mpsz layer by using the code chunk below.\n\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), \n     add = TRUE)\n\n\n\n\n\n\n\n\nüí° Reminder: If you need high cartographic quality maps, other R packages such as tmap should be used.\n\nAnswer: The preschool points did not overlay on the mpsz layer because the two datasets use different Coordinate Reference Systems (CRS).\n\nmpsz is in SVY21 (EPSG:3414).\nPreschools are in WGS84 (EPSG:4326).\n\nTo fix this, both layers must be transformed to the same CRS before plotting, for example using:\n\nexample_EPSG3414 &lt;- st_transform(preschool, st_crs(mpsz))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#working-with-projection",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#working-with-projection",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\n\n\nThis is an example the coordinate system of¬†mpsz¬†simple feature data frame by using¬†st_crs()¬†of¬†sf¬†package as shown in the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nIn order to assign the correct EPSG code to¬†mpsz¬†data frame,¬†st_set_crs()¬†of¬†sfpackage is used as shown in the code chunk below.\n\nmpsz &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check the CSR again by using the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is 3414 now.\n\n\n\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nLet us perform the projection transformation by using the code chunk below.\n\npreschool &lt;- st_transform(preschool, crs = 3414)\n\nüìí Note:\nIn practice, we need to find out the appropriate project coordinate system to use before performing the projection transformation.\nNext, let us display the content of preschool sf data frame as shown below.\nprint(preschool, n = 0)\nSimple feature collection with 2290 features and 2 fields Geometry type: POINT Dimension: XYZ Bounding box: xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88 z_range: zmin: 0 zmax: 0 Projected CRS: SVY21 / Singapore TM\nNow, let us try to plot the preschool layer ontop of mpsz layer again by using the similar code chunk you used earlier.\n\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), add = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "In practice, it is not unusual that we will come across data such as¬†listing¬†of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\n\n\nSince¬†listings¬†data set is in csv file format, we will use¬†read_csv()¬†of¬†readrpackage to import¬†listing.csv¬†as shown the code chunk below. The output R object is called¬†listings¬†and it is a¬†tibble data frame.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3659 Columns: 18\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nThe code chunk below converts¬†listing¬†data frame into a simple feature data frame by using¬†st_as_sf()of¬†sf¬†packages\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nThings to learn from the arguments above:\n\ncoords: Specify the coordinate columns ‚Äî X (longitude) first, followed by Y (latitude).\n\ncrs: Provide the coordinate reference system in EPSG format.\n\nEPSG:4326 = WGS84 (global geographic coordinate system)\n\nEPSG:3414 = SVY21 (Singapore projected coordinate system)\n\nFor other countries, you can look up EPSG codes at epsg.io.\n\n\n%&gt;% + st_transform(): Used to transform the newly created simple feature data frame into the SVY21 projected coordinate system.\n\nLet us examine the content of this newly created simple feature data frame.\n\nglimpse(listings_sf)\n\nRows: 3,659\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 29‚Ä¶\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", ‚Ä¶\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925‚Ä¶\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",‚Ä¶\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg‚Ä¶\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu‚Ä¶\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat‚Ä¶\n$ price                          &lt;dbl&gt; 143, NA, 76, NA, NA, 85, NA, NA, 41, 79‚Ä¶\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 180, 180, 92,‚Ä¶\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 131, 17, 5, 60, 81,‚Ä¶\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20‚Ä¶\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.14, 0.27, 0.13, 0.10, 0.80, 0.1‚Ä¶\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 58, 58, 7, 58, 58, 5, 7, 7, 1,‚Ä¶\n$ availability_365               &lt;dbl&gt; 90, 79, 90, 153, 153, 365, 153, 153, 36‚Ä¶\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ‚Ä¶\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, \"S039‚Ä¶\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (‚Ä¶\n\n\n\n\nlibrary(sf)\n\nlisting_sf &lt;- st_as_sf(listings,\n                       coords = c(\"longitude\", \"latitude\"),\n                       crs = 4326) %&gt;%\n              st_transform(crs = 3414)\n\nplot(mpsz$geometry)\nplot(listing_sf$geometry,\n     col = \"black\",\n     pch = 20,\n     cex = 0.5,\n     add = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#geoprocessing-with-sf-package-cases",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#geoprocessing-with-sf-package-cases",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "Besides providing functions to handling (i.e.¬†importing, exporting, assigning projection, transforming projection etc) geospatial data,¬†sf¬†package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\nIn this section, we will learn how to answer GIS questions by using geoprocessing functions of sf package.\n\n\n\n\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the existing cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\n\n\n\n¬†st_buffer()¬†of¬†sf¬†package is used to compute the 5-meter buffers around cycling paths.\n\n\nbuffer_cycling &lt;- st_buffer(\n  cyclingpath, dist=5, nQuadSegs = 30)\n\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nIf you are tidyverse person like me, code chunk below should be used.\n\n\nbuffer_cycling &lt;- buffer_cycling %&gt;%\n  mutate(AREA = st_area(geometry))\n\n\n¬†sum()¬†of Base R will be used to derive the total land involved\n\n\nsum(buffer_cycling$AREA)\n\n3561648 [m^2]\n\n\nADDITION:\nWe can also create a plot showing the buffer by a selected planning subzone.\nAssuming that we are interested on the land acquisition in Tampines West planning subzone.\n\n¬†filter()¬†of dplyr package will be used to extract polygon feature of Tampines West by using the code chunk below.\n\n\nmpsz_selected &lt;- mpsz %&gt;%\n  filter(SUBZONE_N == \"TAMPINES WEST\") \n\n\n¬†st_intersection()¬†of¬†sf¬†package will be used to clip cycling buffers within Tampines West planning subzone.\n\n\nst_crs(buffer_cycling) &lt;- 3414\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz_selected) &lt;- 3414\n\nbuffer_cycling_selected &lt;- st_intersection(\n  buffer_cycling, mpsz_selected)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n\n\n¬†plot()¬†of R Graphic will be used to create the plot as shown below.\n\n\n\n\n\n\n\nThe authority requires a count of pre-schools for each planning subzone to support forward planning. Using R and the sf package, perform the necessary geoprocessing to compute these counts and present the results clearly.\n\n\n\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using¬†st_intersects(). Next,¬†length()¬†of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\nüí°Note : st_intersection( ) and ¬†st_intersects() is different.\n\nmpsz$`PreSch Count`&lt;- lengths(st_intersects(mpsz, preschool))\n\nCheck the summary statistics of the newly derived¬†PreSch Count¬†field by using¬†summary()¬†as shown in the code chunk below.\n\nsummary(mpsz$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning subzone with the most number of pre-school, the¬†top_n()¬†of¬†dplyr¬†package is used as shown in the code chunk below.\n\ntop_n(mpsz, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nIn the code chunk below, another geoprocessing function of sf package called¬†st_area()¬†is used to derive the area of each planning subzone.\n\nmpsz$Area &lt;- mpsz %&gt;%\n  st_area()\n\nNext,¬†mutate()¬†of¬†dplyr¬†package is used to compute the density by using the code chunk below.\n\nmpsz &lt;- mpsz %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nIn this section, we will visualise the derive variables by using appropriate Exploratory data Analysis methods of¬†ggplot2.\nFirstly, we will plot a histogram to reveal the distribution of¬†PreSch Density. Conventionally,¬†hist()¬†of R Graphics will be used as shown in the code chunk below.\n\nhist(mpsz$`PreSch Density`)\n\n\n\n\n\n\n\n\nAlthough the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.\nIn the code chunk below, appropriate¬†ggplot2¬†functions will be used.\n\nggplot(data=mpsz, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning subzones with a single pre-school, on the other hand, \\nthere are seven planning subzones with at least 30 or more pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\nIn the code chunk below, appropriate ggplot2 functions are used to plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\n\nggplot(data=mpsz, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS626-GAA",
    "section": "",
    "text": "Hi there! üëã\nWelcome to my learning journal for ISSS626-G1 ‚Äì Geospatial Analytics and Applications.\nThis site is my little corner ‚Äî think of it as a travel diary of my journey through geospatial analytics, with maps, code, and stories along the way."
  }
]
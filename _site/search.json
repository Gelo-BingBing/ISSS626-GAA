[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "By the end of this hands-on, I should be able to:\n\nImport and manage geospatial and aspatial datasets in R.\nExplore and check simple feature data frames using Base R and sf functions.\nAssign and transform coordinate systems.\nPerform data wrangling with dplyr.\nCarry out basic exploratory data analysis (EDA) with ggplot2.\n\n\n\n\nIn this exercise, the first step is to set up a clear folder structure for the project. A main folder (Hands-on_Ex) is created with a subfolder for the exercise (Hands-on_Ex01). Inside it, a data directory is organized into two parts:\n\nGeospatial data: contains shapefiles such as the 2014 Subzone Boundary, Pre-Schools Location, and Cycling Path.\nAspatial data: contains tabular data, specifically the Airbnb listing dataset (listing.csv).\n\nThis organization ensures that both spatial and non-spatial datasets are properly separated and ready to be used in R for analysis.\n\n\n\nThis exercise begins by setting up the essential R packages:\n\nsf ‚Äì for importing, managing, and processing geospatial data.\ntidyverse ‚Äì for data wrangling and visualization. Specifically, it uses:\n\nreadr (CSV import),\ntidyr (data manipulation),\ndplyr (data transformation),\nggplot2 (visualization).\n\n\n\npacman::p_load(sf, tidyverse)\n\nTo load them efficiently, the pacman package is used with p_load(), which installs and loads the required packages into R in one step.\n\n\n\nIn this section, you will learn how to import the following geospatial data into R by using¬†st_read()¬†of¬†sf¬†package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\n\n\n\ndsn must point to the correct folder\n\ndsn should be the path to the folder that contains the .shp, .dbf, .prj, and .shx files.\nIf you only write dsn = \"geospatial/\" but the files are still inside another subfolder (e.g., MasterPlan2014SubzoneBoundaryWebSHP/), you‚Äôll get the error ‚Äúfile doesn‚Äôt seem to exist‚Äù.\n\nlayer must match the shapefile name\n\nIf the shapefile is MP14_SUBZONE_WEB_PL.shp, then use layer = \"MP14_SUBZONE_WEB_PL\".\nDo not include the .shp extension.\n\nOrganize your files properly\n\nIn the course material, the example works directly because all shapefile components are already placed inside the geospatial/ folder.\nIf your files are still inside a nested folder, you need to either:\n\nadjust the dsn to point to that subfolder, or\nmove the .shp/.dbf/.prj/.shx files directly into geospatial/.\n\n\n\n\nmpsz &lt;- st_read(\n  dsn   = \"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\",\n  layer = \"MP14_SUBZONE_WEB_PL\"\n)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWhen using st_read(), always check that your dsn points to the exact folder where the shapefile components are stored, and that the layer matches the shapefile name (without extension). A clean folder structure avoids errors and makes your code simpler.\n\n\n\n\n1.4.2¬†Importing polyline feature data in shapefile form\nThe code chunk below uses¬†st_read()¬†function of¬†sf¬†package to import¬†CyclingPath¬†shapefile into R as line feature data frame.\n\ncyclingpath = st_read(dsn = \"data/geospatial/CyclingPath_Apr2025\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/CyclingPath_Apr2025' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4651 features and 19 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11721.1 ymin: 27550.13 xmax: 42809.37 ymax: 49702.59\nProjected CRS: SVY21\n\n\n\n\n\nThe¬†PreSchoolsLocation¬†is in¬†kml¬†format. The code chunk below will be used to import the kml into R.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nüí° First, carefully examine your dataset\n\n\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n‚ö†Ô∏è Notice that the print only displays basic information of the feature class.\n\n\n\nBesides the basic geometry, each geospatial dataset also contains attribute information stored in the data frame. To quickly explore these attributes, the glimpse() function from dplyr is very handy:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, ‚Ä¶\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, ‚Ä¶\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL‚Ä¶\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",‚Ä¶\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",‚Ä¶\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",‚Ä¶\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",‚Ä¶\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT‚Ä¶\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",‚Ä¶\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",‚Ä¶\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05‚Ä¶\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,‚Ä¶\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,‚Ä¶\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,‚Ä¶\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103‚Ä¶\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (‚Ä¶\n\n\n\n\n\nSometimes we would like to reveal complete information of a feature object, this is the job of¬†head()¬†of Base R\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n\n\n\nplot() provides a quick and easy way to visualise geospatial features, allowing us to inspect spatial patterns alongside their attribute values.\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\nNow, let us plot the preschool layer ontop of the mpsz layer by using the code chunk below.\n\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), \n     add = TRUE)\n\n\n\n\n\n\n\n\nüí° Reminder: If you need high cartographic quality maps, other R packages such as tmap should be used.\n\nAnswer: The preschool points did not overlay on the mpsz layer because the two datasets use different Coordinate Reference Systems (CRS).\n\nmpsz is in SVY21 (EPSG:3414).\nPreschools are in WGS84 (EPSG:4326).\n\nTo fix this, both layers must be transformed to the same CRS before plotting, for example using:\n\nexample_EPSG3414 &lt;- st_transform(preschool, st_crs(mpsz))\n\n\n\n\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\n\n\nThis is an example the coordinate system of¬†mpsz¬†simple feature data frame by using¬†st_crs()¬†of¬†sf¬†package as shown in the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nIn order to assign the correct EPSG code to¬†mpsz¬†data frame,¬†st_set_crs()¬†of¬†sfpackage is used as shown in the code chunk below.\n\nmpsz &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check the CSR again by using the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is 3414 now.\n\n\n\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nLet us perform the projection transformation by using the code chunk below.\n\npreschool &lt;- st_transform(preschool, crs = 3414)\n\nüìí Note:\nIn practice, we need to find out the appropriate project coordinate system to use before performing the projection transformation.\nNext, let us display the content of preschool sf data frame as shown below.\nprint(preschool, n = 0)\nSimple feature collection with 2290 features and 2 fields Geometry type: POINT Dimension: XYZ Bounding box: xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88 z_range: zmin: 0 zmax: 0 Projected CRS: SVY21 / Singapore TM\nNow, let us try to plot the preschool layer ontop of mpsz layer again by using the similar code chunk you used earlier.\n\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nIn practice, it is not unusual that we will come across data such as¬†listing¬†of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\n\n\nSince¬†listings¬†data set is in csv file format, we will use¬†read_csv()¬†of¬†readrpackage to import¬†listing.csv¬†as shown the code chunk below. The output R object is called¬†listings¬†and it is a¬†tibble data frame.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3659 Columns: 18\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nThe code chunk below converts¬†listing¬†data frame into a simple feature data frame by using¬†st_as_sf()of¬†sf¬†packages\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nThings to learn from the arguments above:\n\ncoords: Specify the coordinate columns ‚Äî X (longitude) first, followed by Y (latitude).\n\ncrs: Provide the coordinate reference system in EPSG format.\n\nEPSG:4326 = WGS84 (global geographic coordinate system)\n\nEPSG:3414 = SVY21 (Singapore projected coordinate system)\n\nFor other countries, you can look up EPSG codes at epsg.io.\n\n\n%&gt;% + st_transform(): Used to transform the newly created simple feature data frame into the SVY21 projected coordinate system.\n\nLet us examine the content of this newly created simple feature data frame.\n\nglimpse(listings_sf)\n\nRows: 3,659\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 29‚Ä¶\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", ‚Ä¶\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925‚Ä¶\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",‚Ä¶\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg‚Ä¶\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu‚Ä¶\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat‚Ä¶\n$ price                          &lt;dbl&gt; 143, NA, 76, NA, NA, 85, NA, NA, 41, 79‚Ä¶\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 180, 180, 92,‚Ä¶\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 131, 17, 5, 60, 81,‚Ä¶\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20‚Ä¶\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.14, 0.27, 0.13, 0.10, 0.80, 0.1‚Ä¶\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 58, 58, 7, 58, 58, 5, 7, 7, 1,‚Ä¶\n$ availability_365               &lt;dbl&gt; 90, 79, 90, 153, 153, 365, 153, 153, 36‚Ä¶\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ‚Ä¶\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, \"S039‚Ä¶\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (‚Ä¶\n\n\n\n\nlibrary(sf)\n\nlisting_sf &lt;- st_as_sf(listings,\n                       coords = c(\"longitude\", \"latitude\"),\n                       crs = 4326) %&gt;%\n              st_transform(crs = 3414)\n\nplot(mpsz$geometry)\nplot(listing_sf$geometry,\n     col = \"black\",\n     pch = 20,\n     cex = 0.5,\n     add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nBesides providing functions to handling (i.e.¬†importing, exporting, assigning projection, transforming projection etc) geospatial data,¬†sf¬†package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\nIn this section, we will learn how to answer GIS questions by using geoprocessing functions of sf package.\n\n\n\n\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the existing cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\n\n\n\n¬†st_buffer()¬†of¬†sf¬†package is used to compute the 5-meter buffers around cycling paths.\n\n\nbuffer_cycling &lt;- st_buffer(\n  cyclingpath, dist=5, nQuadSegs = 30)\n\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nIf you are tidyverse person like me, code chunk below should be used.\n\n\nbuffer_cycling &lt;- buffer_cycling %&gt;%\n  mutate(AREA = st_area(geometry))\n\n\n¬†sum()¬†of Base R will be used to derive the total land involved\n\n\nsum(buffer_cycling$AREA)\n\n3561648 [m^2]\n\n\nADDITION:\nWe can also create a plot showing the buffer by a selected planning subzone.\nAssuming that we are interested on the land acquisition in Tampines West planning subzone.\n\n¬†filter()¬†of dplyr package will be used to extract polygon feature of Tampines West by using the code chunk below.\n\n\nmpsz_selected &lt;- mpsz %&gt;%\n  filter(SUBZONE_N == \"TAMPINES WEST\") \n\n\n¬†st_intersection()¬†of¬†sf¬†package will be used to clip cycling buffers within Tampines West planning subzone.\n\n\nst_crs(buffer_cycling) &lt;- 3414\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz_selected) &lt;- 3414\n\nbuffer_cycling_selected &lt;- st_intersection(\n  buffer_cycling, mpsz_selected)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n\n\n¬†plot()¬†of R Graphic will be used to create the plot as shown below.\n\nplot(buffer_cycling_selected)\n\nWarning: plotting the first 9 out of 35 attributes; use max.plot = 35 to plot\nall\n\n\n\n\n\n\n\n\nplot(mpsz_selected$geometry)\nplot(buffer_cycling_selected$geometry, \n     col = \"lightblue\", \n     border = \"black\", \n     add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe authority requires a count of pre-schools for each planning subzone to support forward planning. Using R and the sf package, perform the necessary geoprocessing to compute these counts and present the results clearly.\n\n\n\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using¬†st_intersects(). Next,¬†length()¬†of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\nüí°Note : st_intersection( ) and ¬†st_intersects() is different.\n\nmpsz$`PreSch Count`&lt;- lengths(st_intersects(mpsz, preschool))\n\nCheck the summary statistics of the newly derived¬†PreSch Count¬†field by using¬†summary()¬†as shown in the code chunk below.\n\nsummary(mpsz$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning subzone with the most number of pre-school, the¬†top_n()¬†of¬†dplyr¬†package is used as shown in the code chunk below.\n\ntop_n(mpsz, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nIn the code chunk below, another geoprocessing function of sf package called¬†st_area()¬†is used to derive the area of each planning subzone.\n\nmpsz$Area &lt;- mpsz %&gt;%\n  st_area()\n\nNext,¬†mutate()¬†of¬†dplyr¬†package is used to compute the density by using the code chunk below.\n\nmpsz &lt;- mpsz %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nIn this section, we will visualise the derive variables by using appropriate Exploratory data Analysis methods of¬†ggplot2.\nFirstly, we will plot a histogram to reveal the distribution of¬†PreSch Density. Conventionally,¬†hist()¬†of R Graphics will be used as shown in the code chunk below.\n\nhist(mpsz$`PreSch Density`)\n\n\n\n\n\n\n\n\nAlthough the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.\nIn the code chunk below, appropriate¬†ggplot2¬†functions will be used.\n\nggplot(data=mpsz, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning subzones with a single pre-school, on the other hand, \\nthere are seven planning subzones with at least 30 or more pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\nIn the code chunk below, appropriate ggplot2 functions are used to plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\n\nggplot(data=mpsz, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#learning-outcome",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "By the end of this hands-on, I should be able to:\n\nImport and manage geospatial and aspatial datasets in R.\nExplore and check simple feature data frames using Base R and sf functions.\nAssign and transform coordinate systems.\nPerform data wrangling with dplyr.\nCarry out basic exploratory data analysis (EDA) with ggplot2."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#data-preparation",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "In this exercise, the first step is to set up a clear folder structure for the project. A main folder (Hands-on_Ex) is created with a subfolder for the exercise (Hands-on_Ex01). Inside it, a data directory is organized into two parts:\n\nGeospatial data: contains shapefiles such as the 2014 Subzone Boundary, Pre-Schools Location, and Cycling Path.\nAspatial data: contains tabular data, specifically the Airbnb listing dataset (listing.csv).\n\nThis organization ensures that both spatial and non-spatial datasets are properly separated and ready to be used in R for analysis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#getting-started",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "This exercise begins by setting up the essential R packages:\n\nsf ‚Äì for importing, managing, and processing geospatial data.\ntidyverse ‚Äì for data wrangling and visualization. Specifically, it uses:\n\nreadr (CSV import),\ntidyr (data manipulation),\ndplyr (data transformation),\nggplot2 (visualization).\n\n\n\npacman::p_load(sf, tidyverse)\n\nTo load them efficiently, the pacman package is used with p_load(), which installs and loads the required packages into R in one step."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#importing-geospatial-data",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "In this section, you will learn how to import the following geospatial data into R by using¬†st_read()¬†of¬†sf¬†package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\n\n\n\ndsn must point to the correct folder\n\ndsn should be the path to the folder that contains the .shp, .dbf, .prj, and .shx files.\nIf you only write dsn = \"geospatial/\" but the files are still inside another subfolder (e.g., MasterPlan2014SubzoneBoundaryWebSHP/), you‚Äôll get the error ‚Äúfile doesn‚Äôt seem to exist‚Äù.\n\nlayer must match the shapefile name\n\nIf the shapefile is MP14_SUBZONE_WEB_PL.shp, then use layer = \"MP14_SUBZONE_WEB_PL\".\nDo not include the .shp extension.\n\nOrganize your files properly\n\nIn the course material, the example works directly because all shapefile components are already placed inside the geospatial/ folder.\nIf your files are still inside a nested folder, you need to either:\n\nadjust the dsn to point to that subfolder, or\nmove the .shp/.dbf/.prj/.shx files directly into geospatial/.\n\n\n\n\nmpsz &lt;- st_read(\n  dsn   = \"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\",\n  layer = \"MP14_SUBZONE_WEB_PL\"\n)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWhen using st_read(), always check that your dsn points to the exact folder where the shapefile components are stored, and that the layer matches the shapefile name (without extension). A clean folder structure avoids errors and makes your code simpler.\n\n\n\n\n1.4.2¬†Importing polyline feature data in shapefile form\nThe code chunk below uses¬†st_read()¬†function of¬†sf¬†package to import¬†CyclingPath¬†shapefile into R as line feature data frame.\n\ncyclingpath = st_read(dsn = \"data/geospatial/CyclingPath_Apr2025\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/CyclingPath_Apr2025' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4651 features and 19 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11721.1 ymin: 27550.13 xmax: 42809.37 ymax: 49702.59\nProjected CRS: SVY21\n\n\n\n\n\nThe¬†PreSchoolsLocation¬†is in¬†kml¬†format. The code chunk below will be used to import the kml into R.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "üí° First, carefully examine your dataset\n\n\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n‚ö†Ô∏è Notice that the print only displays basic information of the feature class.\n\n\n\nBesides the basic geometry, each geospatial dataset also contains attribute information stored in the data frame. To quickly explore these attributes, the glimpse() function from dplyr is very handy:\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, ‚Ä¶\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, ‚Ä¶\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL‚Ä¶\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",‚Ä¶\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",‚Ä¶\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",‚Ä¶\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",‚Ä¶\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT‚Ä¶\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",‚Ä¶\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",‚Ä¶\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05‚Ä¶\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,‚Ä¶\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,‚Ä¶\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,‚Ä¶\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103‚Ä¶\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (‚Ä¶\n\n\n\n\n\nSometimes we would like to reveal complete information of a feature object, this is the job of¬†head()¬†of Base R\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "plot() provides a quick and easy way to visualise geospatial features, allowing us to inspect spatial patterns alongside their attribute values.\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\nNow, let us plot the preschool layer ontop of the mpsz layer by using the code chunk below.\n\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), \n     add = TRUE)\n\n\n\n\n\n\n\n\nüí° Reminder: If you need high cartographic quality maps, other R packages such as tmap should be used.\n\nAnswer: The preschool points did not overlay on the mpsz layer because the two datasets use different Coordinate Reference Systems (CRS).\n\nmpsz is in SVY21 (EPSG:3414).\nPreschools are in WGS84 (EPSG:4326).\n\nTo fix this, both layers must be transformed to the same CRS before plotting, for example using:\n\nexample_EPSG3414 &lt;- st_transform(preschool, st_crs(mpsz))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#working-with-projection",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#working-with-projection",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\n\n\nThis is an example the coordinate system of¬†mpsz¬†simple feature data frame by using¬†st_crs()¬†of¬†sf¬†package as shown in the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nIn order to assign the correct EPSG code to¬†mpsz¬†data frame,¬†st_set_crs()¬†of¬†sfpackage is used as shown in the code chunk below.\n\nmpsz &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nNow, let us check the CSR again by using the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is 3414 now.\n\n\n\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nLet us perform the projection transformation by using the code chunk below.\n\npreschool &lt;- st_transform(preschool, crs = 3414)\n\nüìí Note:\nIn practice, we need to find out the appropriate project coordinate system to use before performing the projection transformation.\nNext, let us display the content of preschool sf data frame as shown below.\nprint(preschool, n = 0)\nSimple feature collection with 2290 features and 2 fields Geometry type: POINT Dimension: XYZ Bounding box: xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88 z_range: zmin: 0 zmax: 0 Projected CRS: SVY21 / Singapore TM\nNow, let us try to plot the preschool layer ontop of mpsz layer again by using the similar code chunk you used earlier.\n\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), add = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "In practice, it is not unusual that we will come across data such as¬†listing¬†of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\n\n\nSince¬†listings¬†data set is in csv file format, we will use¬†read_csv()¬†of¬†readrpackage to import¬†listing.csv¬†as shown the code chunk below. The output R object is called¬†listings¬†and it is a¬†tibble data frame.\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3659 Columns: 18\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nThe code chunk below converts¬†listing¬†data frame into a simple feature data frame by using¬†st_as_sf()of¬†sf¬†packages\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nThings to learn from the arguments above:\n\ncoords: Specify the coordinate columns ‚Äî X (longitude) first, followed by Y (latitude).\n\ncrs: Provide the coordinate reference system in EPSG format.\n\nEPSG:4326 = WGS84 (global geographic coordinate system)\n\nEPSG:3414 = SVY21 (Singapore projected coordinate system)\n\nFor other countries, you can look up EPSG codes at epsg.io.\n\n\n%&gt;% + st_transform(): Used to transform the newly created simple feature data frame into the SVY21 projected coordinate system.\n\nLet us examine the content of this newly created simple feature data frame.\n\nglimpse(listings_sf)\n\nRows: 3,659\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 29‚Ä¶\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", ‚Ä¶\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925‚Ä¶\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",‚Ä¶\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg‚Ä¶\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu‚Ä¶\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat‚Ä¶\n$ price                          &lt;dbl&gt; 143, NA, 76, NA, NA, 85, NA, NA, 41, 79‚Ä¶\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 180, 180, 92,‚Ä¶\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 131, 17, 5, 60, 81,‚Ä¶\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20‚Ä¶\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.14, 0.27, 0.13, 0.10, 0.80, 0.1‚Ä¶\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 58, 58, 7, 58, 58, 5, 7, 7, 1,‚Ä¶\n$ availability_365               &lt;dbl&gt; 90, 79, 90, 153, 153, 365, 153, 153, 36‚Ä¶\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ‚Ä¶\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, \"S039‚Ä¶\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (‚Ä¶\n\n\n\n\nlibrary(sf)\n\nlisting_sf &lt;- st_as_sf(listings,\n                       coords = c(\"longitude\", \"latitude\"),\n                       crs = 4326) %&gt;%\n              st_transform(crs = 3414)\n\nplot(mpsz$geometry)\nplot(listing_sf$geometry,\n     col = \"black\",\n     pch = 20,\n     cex = 0.5,\n     add = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#geoprocessing-with-sf-package-cases",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on Exercise01.html#geoprocessing-with-sf-package-cases",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "Besides providing functions to handling (i.e.¬†importing, exporting, assigning projection, transforming projection etc) geospatial data,¬†sf¬†package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\nIn this section, we will learn how to answer GIS questions by using geoprocessing functions of sf package.\n\n\n\n\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the existing cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\n\n\n\n¬†st_buffer()¬†of¬†sf¬†package is used to compute the 5-meter buffers around cycling paths.\n\n\nbuffer_cycling &lt;- st_buffer(\n  cyclingpath, dist=5, nQuadSegs = 30)\n\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nIf you are tidyverse person like me, code chunk below should be used.\n\n\nbuffer_cycling &lt;- buffer_cycling %&gt;%\n  mutate(AREA = st_area(geometry))\n\n\n¬†sum()¬†of Base R will be used to derive the total land involved\n\n\nsum(buffer_cycling$AREA)\n\n3561648 [m^2]\n\n\nADDITION:\nWe can also create a plot showing the buffer by a selected planning subzone.\nAssuming that we are interested on the land acquisition in Tampines West planning subzone.\n\n¬†filter()¬†of dplyr package will be used to extract polygon feature of Tampines West by using the code chunk below.\n\n\nmpsz_selected &lt;- mpsz %&gt;%\n  filter(SUBZONE_N == \"TAMPINES WEST\") \n\n\n¬†st_intersection()¬†of¬†sf¬†package will be used to clip cycling buffers within Tampines West planning subzone.\n\n\nst_crs(buffer_cycling) &lt;- 3414\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz_selected) &lt;- 3414\n\nbuffer_cycling_selected &lt;- st_intersection(\n  buffer_cycling, mpsz_selected)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n\n\n¬†plot()¬†of R Graphic will be used to create the plot as shown below.\n\nplot(buffer_cycling_selected)\n\nWarning: plotting the first 9 out of 35 attributes; use max.plot = 35 to plot\nall\n\n\n\n\n\n\n\n\nplot(mpsz_selected$geometry)\nplot(buffer_cycling_selected$geometry, \n     col = \"lightblue\", \n     border = \"black\", \n     add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe authority requires a count of pre-schools for each planning subzone to support forward planning. Using R and the sf package, perform the necessary geoprocessing to compute these counts and present the results clearly.\n\n\n\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using¬†st_intersects(). Next,¬†length()¬†of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\nüí°Note : st_intersection( ) and ¬†st_intersects() is different.\n\nmpsz$`PreSch Count`&lt;- lengths(st_intersects(mpsz, preschool))\n\nCheck the summary statistics of the newly derived¬†PreSch Count¬†field by using¬†summary()¬†as shown in the code chunk below.\n\nsummary(mpsz$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning subzone with the most number of pre-school, the¬†top_n()¬†of¬†dplyr¬†package is used as shown in the code chunk below.\n\ntop_n(mpsz, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nIn the code chunk below, another geoprocessing function of sf package called¬†st_area()¬†is used to derive the area of each planning subzone.\n\nmpsz$Area &lt;- mpsz %&gt;%\n  st_area()\n\nNext,¬†mutate()¬†of¬†dplyr¬†package is used to compute the density by using the code chunk below.\n\nmpsz &lt;- mpsz %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nIn this section, we will visualise the derive variables by using appropriate Exploratory data Analysis methods of¬†ggplot2.\nFirstly, we will plot a histogram to reveal the distribution of¬†PreSch Density. Conventionally,¬†hist()¬†of R Graphics will be used as shown in the code chunk below.\n\nhist(mpsz$`PreSch Density`)\n\n\n\n\n\n\n\n\nAlthough the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.\nIn the code chunk below, appropriate¬†ggplot2¬†functions will be used.\n\nggplot(data=mpsz, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning subzones with a single pre-school, on the other hand, \\nthere are seven planning subzones with at least 30 or more pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\nIn the code chunk below, appropriate ggplot2 functions are used to plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\n\nggplot(data=mpsz, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS626-GAA",
    "section": "",
    "text": "Hi there! üëã\nWelcome to my learning journal for ISSS626-G1 ‚Äì Geospatial Analytics and Applications.\nThis site is my little corner ‚Äî think of it as a travel diary of my journey through geospatial analytics, with maps, code, and stories along the way."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Thematic mapping uses symbols on maps to represent invisible or abstract data, such as population, crime rates, or housing prices. These values aren‚Äôt naturally visible in the landscape but can be effectively communicated through visual representation.\nGeovisualisation is the practice of turning spatial data into visuals to support exploration, analysis, and communication. It combines cartography, data visualization, and computer science to improve our understanding of geographic patterns.\nIn this chapter, we will learn how to create meaningful and accurate choropleth maps using the tmap package in R.\n\nüí° Tip: Always read the function description before using it. Understanding what it does can prevent mistakes and confusion.\n\n\n\n\nIn this hands-on exercise, the key R package use is¬†tmap¬†package in R. Beside¬†tmap¬†package, five other R packages will be used. They are:\n\nreadr¬†for importing delimited text file,\ntidyr¬†for tidying data,\ndplyr¬†for wrangling data and\nsf¬†for handling geospatial data.\nrvest¬†for scraping (or harvesting) data from web pages.\n\nAmong the five packages,¬†readr,¬†tidyr¬†and¬†dplyr¬†are part of¬†tidyverse¬†package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse, rvest)\n\nNotice that, we only need to install¬†tidyverse.\n\n\n\n\n\nTwo datasets are used to construct the choropleth map:\n\nMaster Plan 2019 Subzone Boundary (No Sea) [KML]:\nThis is a geospatial dataset downloaded from data.gov.sg. It provides the planning subzone boundaries of Singapore based on URA‚Äôs Master Plan 2019. The geometry information in this file enables spatial visualization.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2024 [CSV]:\nThis is an aspatial dataset from the Singapore Department of Statistics. Although it lacks coordinate data, it contains PA (Planning Area) and SZ (Subzone) fields. These fields can be used as unique keys to join with the spatial boundary file for georeferencing.\n\n\n\n\nThe code chunk below uses the¬†st_read()¬†function of¬†sf¬†package to import¬†MP14_SUBZONE_WEB_PLshapefile into R as a simple feature data frame called¬†mpsz.\n\nmpsz &lt;- st_read(\"data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\nFunction to extract values from the HTML description\n\nextract_kml_field &lt;- function(html_text, field_name) {\n  if (is.na(html_text) || html_text == \"\") return(NA_character_)\n  \n  page &lt;- read_html(html_text)\n  rows &lt;- page %&gt;% html_elements(\"tr\")\n  \n  value &lt;- rows %&gt;%\n    keep(~ html_text2(html_element(.x, \"th\")) == field_name) %&gt;%\n    html_element(\"td\") %&gt;%\n    html_text2()\n  \n  if (length(value) == 0) NA_character_ else value\n}\n\n\nmpsz &lt;- mpsz %&gt;%\n  mutate(\n    REGION_N = map_chr(Description, extract_kml_field, \"REGION_N\"),\n    PLN_AREA_N = map_chr(Description, extract_kml_field, \"PLN_AREA_N\"),\n    SUBZONE_N = map_chr(Description, extract_kml_field, \"SUBZONE_N\"),\n    SUBZONE_C = map_chr(Description, extract_kml_field, \"SUBZONE_C\")\n  ) %&gt;%\n  select(-Name, -Description) %&gt;%\n  relocate(geometry, .after = last_col())\n\nThen,we can examine the content of¬†mpsz¬†by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 332 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 10 features:\n         REGION_N    PLN_AREA_N           SUBZONE_N SUBZONE_C\n1  CENTRAL REGION   BUKIT MERAH          DEPOT ROAD    BMSZ12\n2  CENTRAL REGION   BUKIT MERAH         BUKIT MERAH    BMSZ02\n3  CENTRAL REGION        OUTRAM           CHINATOWN    OTSZ03\n4  CENTRAL REGION DOWNTOWN CORE             PHILLIP    DTSZ04\n5  CENTRAL REGION DOWNTOWN CORE       RAFFLES PLACE    DTSZ05\n6  CENTRAL REGION        OUTRAM        CHINA SQUARE    OTSZ04\n7  CENTRAL REGION   BUKIT MERAH         TIONG BAHRU    BMSZ10\n8  CENTRAL REGION DOWNTOWN CORE    BAYFRONT SUBZONE    DTSZ12\n9  CENTRAL REGION   BUKIT MERAH TIONG BAHRU STATION    BMSZ04\n10 CENTRAL REGION DOWNTOWN CORE       CLIFFORD PIER    DTSZ06\n                         geometry\n1  MULTIPOLYGON Z (((103.8145 ...\n2  MULTIPOLYGON Z (((103.8221 ...\n3  MULTIPOLYGON Z (((103.8438 ...\n4  MULTIPOLYGON Z (((103.8496 ...\n5  MULTIPOLYGON Z (((103.8525 ...\n6  MULTIPOLYGON Z (((103.8486 ...\n7  MULTIPOLYGON Z (((103.8311 ...\n8  MULTIPOLYGON Z (((103.8589 ...\n9  MULTIPOLYGON Z (((103.8283 ...\n10 MULTIPOLYGON Z (((103.8552 ...\n\n\n\n\n\n\n\n\nüìí Notice that only the first ten records will be displayed. Do you know why?\n\n\n\nBy default, when viewing a data frame or an sf object in R, only the first 10 records are displayed.\n\nThis is done for performance and readability reasons‚Äîespecially when the dataset contains hundreds or thousands of rows.\n\nTo view more or all records, you can use functions like View(mpsz), print(mpsz, n = 50), or use dplyr::slice() to select specific rows.\n\n\n\n\n\n\nNext, we will import¬†respopagesextod2024.csv¬†file into RStudio and save the file into an tibble dataframe called¬†popdata.\nThe task will be performed by using¬†read_csv()¬†function of¬†readr¬†package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2024.csv\")\n\nRows: 100928 Columns: 7\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider()¬†of¬†tidyr¬†package, and\nmutate(),¬†filter(),¬†group_by()¬†and¬†select()¬†of¬†dplyr¬†package\n\n\npopdata2024 &lt;- popdata %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2024 &lt;- popdata2024 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext,¬†left_join()¬†of¬†dplyr¬†is used to join the geographical data and attribute table using planning subzone name e.g.¬†SUBZONE_N¬†and¬†SZ¬†as the common identifier.\n\nmpsz_pop2024 &lt;- left_join(mpsz, popdata2024,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nLeft_join()¬†of¬†dplyr¬†package is used with¬†mpsz¬†simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\nwrite_rds(mpsz_pop2024, \"data/rds/mpsz_pop2024.rds\")\n\nüí° You need to create this folder structure first and then write it into the.rds file. One sentence can be added before writing: ‚Äúdir.create(‚Äùdata/rds‚Äù, recursive = TRUE, showWarnings = FALSE) ‚Äù\n\n\n\n\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nTwo approaches can be used to prepare thematic map using¬†tmap, they are:\n\nPlotting a thematic map quickly by using¬†qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nThe easiest and quickest to draw a choropleth map using¬†tmap¬†is using¬†qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\n\n‚Ñπ tmap mode set to \"plot\".\n\nqtm(shp = mpsz_pop2024, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\ntmap_mode()¬†with ‚Äúplot‚Äù option is used to produce a static map. For interactive mode, ‚Äúview‚Äù option should be used.\nfill¬†argument is used to map the attribute (i.e.¬†DEPENDENCY)\n\n\n\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of¬†qtm()¬†is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below,¬†tmap‚Äôs drawing elements should be used.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scalebar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n[plot mode] fit legend/component: Some legend items or map compoments do not\nfit well, and are therefore rescaled.\n‚Ñπ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n\n\n\n\n\n\n\n\n\n\n\nThe basic building block of¬†tmap¬†is¬†tm_shape()¬†followed by one or more layer elemments such as¬†tm_polygons(),¬†tm_symbols(),¬†tm_lines(),¬†tm_raster()¬†and¬†tm_text().\nIn the code chunk below,¬†tm_shape()¬†is used to define the input data (i.e¬†mpsz_pop2024) and¬†tm_polygons()¬†is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\nüìí Note: By default, it plots areas of polygons in light gray (gray85) and polygons borders in slightly dark gray (gray25).\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as¬†Dependency¬†to¬†tm_polygons().\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from¬†tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called ‚Äúpretty‚Äù.\nThe default colour scheme used is¬†blues3¬†of ColorBrewer.\nBy default, Missing value will be shaded in grey.\n\n\n\n\nActually,¬†tm_polygons()¬†is a wraper of¬†tm_fill()¬†and¬†tm_border().¬†tm_fill()¬†shades the polygons by using the default colour scheme and¬†tm_borders()¬†adds the borders of the polygon features onto the choropleth map.\nThe code chunk below draws a choropleth map by using¬†tm_fill()¬†alone.\n\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones,¬†tm_borders()¬†will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders()\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe¬†fill_alpha¬†argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside¬†fill_alpha¬†argument, there are three other arguments for¬†tm_borders(), they are:\n\ncol¬†= border colour,\nlwd¬†= border line width. The default is 1, and\nlty¬†= border line type. The default is ‚Äúsolid‚Äù.\n\n\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(col = \"grey60\",\n             lwd = 0.1,\n             lty = \"dashed\")\n\n\n\n\n\n\n\n\n\n\n\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap¬†provides a total ten data classification methods, namely:¬†fixed,¬†sd,¬†equal,¬†pretty¬†(default),¬†quantile,¬†kmeans,¬†hclust,¬†bclust,¬†fisher, and¬†jenks.\nTo define a data classification method, the¬†style¬†argument of¬†tm_fill()¬†or¬†tm_polygons()¬†will be used.\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nIn the code chunk below,¬†equal¬†data classification method is used.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n\n\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the¬†breaks¬†argument to the¬†tm_scale_intervals(). It is important to note that, in¬†tmap¬†the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the¬†breaks¬†option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of¬†DEPENDENCY¬†field.\n\nsummary(mpsz_pop2024$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1905  0.7450  0.8377  0.8738  0.9366 12.7500      94 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our¬†breaks¬†vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00))) +\n  tm_borders(fill_alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break. They are\nassigned to the highest interval\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap¬†supports colour ramps either defined by the user or a set of predefined colour ramps from the¬†RColorBrewer¬†package.\n\n\nTo change the colour, we assign the preferred colour to¬†palette¬†argument of¬†values¬†as shown in the code chunk below.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a ‚Äú-‚Äù prefix.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"-brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\nBeside map style,¬†tmap¬†also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below,¬†tm_compass(),¬†tm_scale_bar(),¬†tm_grid()¬†and¬†tm_credit()¬†are used to add compass, scale bar, grid lines and data sources onto the choropleth map.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5)) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scalebar() +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: data.gov.sg & singstat\",\n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\nMap layout refers to the combination of all map elements into a cohensive map. It includes the map background, frame, typography, scale, aspect ratio, margins, and more.\nWe can customize the map layout using the¬†tm_layout()¬†function. In this section, we cover the most often used arguments of this function using the dependency choropleth map as example.\n\n\nIn¬†tmap, several¬†legend¬†options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_pos_auto_in() +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scalebar() +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: data.gov.sg & singstat\",\n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\ntmap¬†allows a wide variety of layout settings to be changed. They can be called by using¬†tmap_style().\nThe code chunk below shows the¬†classic¬†style is used.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"-brewer.greens\")) + \n  tm_borders(fill_alpha = 0.5) + \n  tmap_style(\"natural\")\n\nstyle set to \"natural\"\n\n\nother available styles are: \"white\" (tmap default), \"gray\", \"cobalt\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\"\n\n\ntmap v3 styles: \"v3\" (tmap v3 default), \"gray_v3\", \"natural_v3\", \"cobalt_v3\", \"albatross_v3\", \"beaver_v3\", \"bw_v3\", \"classic_v3\", \"watercolor_v3\"\n\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code: ‚Äò‚Äôtmap_style(‚Äúwhite‚Äù)‚Äô‚Äô\n\n\n\n\n\nSmall multiple maps, also referred to as¬†facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn¬†tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby creating multiple stand-alone maps with¬†tmap_arrange(), and\nby defining a group-by variable in¬†tm_facets().\n\n\n\nIn this example, small multiple choropleth maps are created by assigning two variables to the visual variable (i.e.¬†fill).\n\ntm_shape(mpsz_pop2024) + \n  tm_polygons(\n    fill = c(\"YOUNG\", \"AGED\"),\n    fill.legend = \n      tm_legend(position = tm_pos_in(\n        \"right\", \"bottom\")),\n    fill.scale = tm_scale_intervals(\n      style = \"equal\", \n      n = 5,\n      values = \"brewer.blues\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tmap_style(\"natural\")\n\nstyle set to \"natural\"\n\n\nother available styles are: \"white\" (tmap default), \"gray\", \"cobalt\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\"\n\n\ntmap v3 styles: \"v3\" (tmap v3 default), \"gray_v3\", \"natural_v3\", \"cobalt_v3\", \"albatross_v3\", \"beaver_v3\", \"bw_v3\", \"classic_v3\", \"watercolor_v3\"\n\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple choropleth maps are created and¬†tmap_arrnage()¬†is used to arrnage them in a grid layout.\n\nyoungmap &lt;- tm_shape(mpsz_pop2024)+ \n  tm_polygons(fill = \"YOUNG\",\n              fill.legend = tm_legend(\n                position = tm_pos_in(\n                  \"right\", \"bottom\"),\n                  item.height = 0.8),\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                values = \"brewer.blues\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of young population\")\n                \nagedmap &lt;- tm_shape(mpsz_pop2024)+ \n  tm_polygons(fill = \"AGED\",\n              fill.legend = tm_legend(\n                position = tm_pos_in(\n                  \"right\", \"bottom\"),\n                item.height = 0.8),\n              fill.scale = tm_scale_intervals(\n              style = \"quantile\", \n              values = \"brewer.blues\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of aged population\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using¬†tm_facets().\n\ntm_shape(mpsz_pop2024) +\n  tm_fill(fill = \"DEPENDENCY\",\n          fill.scale = tm_scale_intervals(\n            style = \"quantile\",\n            values = \"brewer.blues\")) + \n  tm_facets(by = \"REGION_N\",\n            nrow = 2, \n            ncols = 3,\n            free.coords=TRUE, \n            drop.units=TRUE) +\n  tm_layout(legend.show = TRUE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, you can also use¬†filter()¬†of¬†dplyr¬†package to select geographical area of interest and plot a choropleth map focus only on the selected region.\n\nmpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\") %&gt;%\n  tm_shape() +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                values = \"brewer.greens\"),\n              fill.legend = tm_legend()) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nMaps and statistical charts complement each other by visually representing different aspects of the same data, offering a more comprehensive understanding. Maps excel at showing spatial relationships and geographical patterns, while charts effectively display numerical data, trends, and comparisons. Combining both allows for a more insightful and engaging data narrative, especially when dealing with spatial data that also has quantifiable characteristics.\nWith tmap, statistical chart and be incorporate into the map visualisation by using¬†fill.chat¬†argument of map layers and¬†legend chart¬†feature as shown in the code chunk below.\n\nmpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\") %&gt;%\n  tm_shape() +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                values = \"brewer.greens\"),\n              fill.legend = tm_legend(),\n              fill.chart = tm_chart_box()) +\n  tm_borders() +\n  tm_layout(asp = 0.8)\n\n\n\n\n\n\n\n\nIn the code chunk below, We improve the visual representation further by highlighting and lebaling the outliers on the choropleth map.\n\nmpsz_selected &lt;- mpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\")\n\nstats &lt;- boxplot.stats(mpsz_selected$DEPENDENCY)\n\noutlier_vals &lt;- stats$out\n\noutlier_sf &lt;- mpsz_selected[mpsz_selected$DEPENDENCY %in% outlier_vals, ]\n\ntm_shape(mpsz_selected) +\n  tm_polygons(fill = \"DEPENDENCY\",\n          fill.scale = tm_scale_intervals(\n            style = \"quantile\", \n            values = \"brewer.blues\"),\n          fill.legend = tm_legend(),\n          fill.chart = tm_chart_box()) +\n  tm_borders(fill_alpha = 0.5) +\ntm_shape(outlier_sf) +\n  tm_borders(col = \"red\", lwd = 2) +\n  tm_text(\"SUBZONE_N\", col = \"red\", size = 0.7) +\n  tm_layout(asp = 0.8)\n\n\n\n\n\n\n\n\n\n\n\nInteractive maps let users actively explore and interact with the data they display. Unlike static maps, you can zoom in and out, pan across areas, click on locations for more information, and even work with data overlays or visualizations‚Äîmaking the experience more dynamic and informative. One of the great things about tmap is that it lets you switch easily between static and interactive maps using¬†tmap_mode(), so you can choose the view that best suits your analysis.\nBy modifying the code chunk in sub-section 2.6, the code chunks below build an interactive map using:\n\nregion_selected &lt;- mpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\")\nregion_bbox &lt;- st_bbox(region_selected)\n\nstats &lt;- boxplot.stats(region_selected$DEPENDENCY)\noutlier_vals &lt;- stats$out\noutlier_sf &lt;- region_selected[region_selected$DEPENDENCY %in% outlier_vals, ]\n\ntmap_mode(\"view\")\n\n‚Ñπ tmap mode set to \"view\".\n\ntm_shape(region_selected, \n         bbox = region_bbox) +\n  tm_fill(\"DEPENDENCY\",\n          id = \"SUBZONE_N\",\n          popup.vars = c(\n            \"Name\" = \"SUBZONE_N\", \n            \"Dependency\" = \"DEPENDENCY\")) +\n  tm_borders() +\n  tm_shape(outlier_sf) +\n  tm_borders(col = \"red\", lwd = 2)\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n‚Ñπ tmap mode set to \"plot\".\n\n\nThe interactive map above is far from satisfactory. While we want to encourage users to engage and explore the interactive by zooming in and out of the study area freely. But, users might lost in the cyberspace with too much freedom to zoom-in and zoom-out.\nTo address this issue,¬†set_zoom_limits¬†argument can be used to limit the map extend users can zooming in and out of the map areas as shown below.\n\nregion_selected &lt;- mpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\")\nregion_bbox &lt;- st_bbox(region_selected)\n\nstats &lt;- boxplot.stats(region_selected$DEPENDENCY)\noutlier_vals &lt;- stats$out\noutlier_sf &lt;- region_selected[region_selected$DEPENDENCY %in% outlier_vals, ]\n\ntmap_mode(\"view\")\n\n‚Ñπ tmap mode set to \"view\".\n\ntm_shape(region_selected, \n         bbox = region_bbox) +\n  tm_fill(\"DEPENDENCY\",\n          id = \"SUBZONE_N\",\n          popup.vars = c(\n            \"Name\" = \"SUBZONE_N\", \n            \"Dependency\" = \"DEPENDENCY\")) +\n  tm_borders() +\n  tm_shape(outlier_sf) +\n  tm_borders(col = \"red\", lwd = 2) +\n  tm_view(set_zoom_limits = c(12,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n‚Ñπ tmap mode set to \"plot\".\n\n\n\n\n\n\n\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‚Äòspread()‚Äô and ‚Äògather()‚Äô Functions\n\n\n\n\nKam, K. (2022). Thematic Mapping and GeoVisualisation with R. R4GDSA Lecture Notes, Chapter 2."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#overview",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Thematic mapping uses symbols on maps to represent invisible or abstract data, such as population, crime rates, or housing prices. These values aren‚Äôt naturally visible in the landscape but can be effectively communicated through visual representation.\nGeovisualisation is the practice of turning spatial data into visuals to support exploration, analysis, and communication. It combines cartography, data visualization, and computer science to improve our understanding of geographic patterns.\nIn this chapter, we will learn how to create meaningful and accurate choropleth maps using the tmap package in R.\n\nüí° Tip: Always read the function description before using it. Understanding what it does can prevent mistakes and confusion."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#getting-started",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "In this hands-on exercise, the key R package use is¬†tmap¬†package in R. Beside¬†tmap¬†package, five other R packages will be used. They are:\n\nreadr¬†for importing delimited text file,\ntidyr¬†for tidying data,\ndplyr¬†for wrangling data and\nsf¬†for handling geospatial data.\nrvest¬†for scraping (or harvesting) data from web pages.\n\nAmong the five packages,¬†readr,¬†tidyr¬†and¬†dplyr¬†are part of¬†tidyverse¬†package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse, rvest)\n\nNotice that, we only need to install¬†tidyverse."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#importing-data-into-r",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Two datasets are used to construct the choropleth map:\n\nMaster Plan 2019 Subzone Boundary (No Sea) [KML]:\nThis is a geospatial dataset downloaded from data.gov.sg. It provides the planning subzone boundaries of Singapore based on URA‚Äôs Master Plan 2019. The geometry information in this file enables spatial visualization.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2024 [CSV]:\nThis is an aspatial dataset from the Singapore Department of Statistics. Although it lacks coordinate data, it contains PA (Planning Area) and SZ (Subzone) fields. These fields can be used as unique keys to join with the spatial boundary file for georeferencing.\n\n\n\n\nThe code chunk below uses the¬†st_read()¬†function of¬†sf¬†package to import¬†MP14_SUBZONE_WEB_PLshapefile into R as a simple feature data frame called¬†mpsz.\n\nmpsz &lt;- st_read(\"data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `/Users/geloliu/Gelo-BingBing/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\nFunction to extract values from the HTML description\n\nextract_kml_field &lt;- function(html_text, field_name) {\n  if (is.na(html_text) || html_text == \"\") return(NA_character_)\n  \n  page &lt;- read_html(html_text)\n  rows &lt;- page %&gt;% html_elements(\"tr\")\n  \n  value &lt;- rows %&gt;%\n    keep(~ html_text2(html_element(.x, \"th\")) == field_name) %&gt;%\n    html_element(\"td\") %&gt;%\n    html_text2()\n  \n  if (length(value) == 0) NA_character_ else value\n}\n\n\nmpsz &lt;- mpsz %&gt;%\n  mutate(\n    REGION_N = map_chr(Description, extract_kml_field, \"REGION_N\"),\n    PLN_AREA_N = map_chr(Description, extract_kml_field, \"PLN_AREA_N\"),\n    SUBZONE_N = map_chr(Description, extract_kml_field, \"SUBZONE_N\"),\n    SUBZONE_C = map_chr(Description, extract_kml_field, \"SUBZONE_C\")\n  ) %&gt;%\n  select(-Name, -Description) %&gt;%\n  relocate(geometry, .after = last_col())\n\nThen,we can examine the content of¬†mpsz¬†by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 332 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 10 features:\n         REGION_N    PLN_AREA_N           SUBZONE_N SUBZONE_C\n1  CENTRAL REGION   BUKIT MERAH          DEPOT ROAD    BMSZ12\n2  CENTRAL REGION   BUKIT MERAH         BUKIT MERAH    BMSZ02\n3  CENTRAL REGION        OUTRAM           CHINATOWN    OTSZ03\n4  CENTRAL REGION DOWNTOWN CORE             PHILLIP    DTSZ04\n5  CENTRAL REGION DOWNTOWN CORE       RAFFLES PLACE    DTSZ05\n6  CENTRAL REGION        OUTRAM        CHINA SQUARE    OTSZ04\n7  CENTRAL REGION   BUKIT MERAH         TIONG BAHRU    BMSZ10\n8  CENTRAL REGION DOWNTOWN CORE    BAYFRONT SUBZONE    DTSZ12\n9  CENTRAL REGION   BUKIT MERAH TIONG BAHRU STATION    BMSZ04\n10 CENTRAL REGION DOWNTOWN CORE       CLIFFORD PIER    DTSZ06\n                         geometry\n1  MULTIPOLYGON Z (((103.8145 ...\n2  MULTIPOLYGON Z (((103.8221 ...\n3  MULTIPOLYGON Z (((103.8438 ...\n4  MULTIPOLYGON Z (((103.8496 ...\n5  MULTIPOLYGON Z (((103.8525 ...\n6  MULTIPOLYGON Z (((103.8486 ...\n7  MULTIPOLYGON Z (((103.8311 ...\n8  MULTIPOLYGON Z (((103.8589 ...\n9  MULTIPOLYGON Z (((103.8283 ...\n10 MULTIPOLYGON Z (((103.8552 ...\n\n\n\n\n\n\n\n\nüìí Notice that only the first ten records will be displayed. Do you know why?\n\n\n\nBy default, when viewing a data frame or an sf object in R, only the first 10 records are displayed.\n\nThis is done for performance and readability reasons‚Äîespecially when the dataset contains hundreds or thousands of rows.\n\nTo view more or all records, you can use functions like View(mpsz), print(mpsz, n = 50), or use dplyr::slice() to select specific rows.\n\n\n\n\n\n\nNext, we will import¬†respopagesextod2024.csv¬†file into RStudio and save the file into an tibble dataframe called¬†popdata.\nThe task will be performed by using¬†read_csv()¬†function of¬†readr¬†package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2024.csv\")\n\nRows: 100928 Columns: 7\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider()¬†of¬†tidyr¬†package, and\nmutate(),¬†filter(),¬†group_by()¬†and¬†select()¬†of¬†dplyr¬†package\n\n\npopdata2024 &lt;- popdata %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2024 &lt;- popdata2024 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext,¬†left_join()¬†of¬†dplyr¬†is used to join the geographical data and attribute table using planning subzone name e.g.¬†SUBZONE_N¬†and¬†SZ¬†as the common identifier.\n\nmpsz_pop2024 &lt;- left_join(mpsz, popdata2024,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nLeft_join()¬†of¬†dplyr¬†package is used with¬†mpsz¬†simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\nwrite_rds(mpsz_pop2024, \"data/rds/mpsz_pop2024.rds\")\n\nüí° You need to create this folder structure first and then write it into the.rds file. One sentence can be added before writing: ‚Äúdir.create(‚Äùdata/rds‚Äù, recursive = TRUE, showWarnings = FALSE) ‚Äù"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nTwo approaches can be used to prepare thematic map using¬†tmap, they are:\n\nPlotting a thematic map quickly by using¬†qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nThe easiest and quickest to draw a choropleth map using¬†tmap¬†is using¬†qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\n\n‚Ñπ tmap mode set to \"plot\".\n\nqtm(shp = mpsz_pop2024, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\ntmap_mode()¬†with ‚Äúplot‚Äù option is used to produce a static map. For interactive mode, ‚Äúview‚Äù option should be used.\nfill¬†argument is used to map the attribute (i.e.¬†DEPENDENCY)\n\n\n\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of¬†qtm()¬†is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below,¬†tmap‚Äôs drawing elements should be used.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scalebar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n[plot mode] fit legend/component: Some legend items or map compoments do not\nfit well, and are therefore rescaled.\n‚Ñπ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n\n\n\n\n\n\n\n\n\n\n\nThe basic building block of¬†tmap¬†is¬†tm_shape()¬†followed by one or more layer elemments such as¬†tm_polygons(),¬†tm_symbols(),¬†tm_lines(),¬†tm_raster()¬†and¬†tm_text().\nIn the code chunk below,¬†tm_shape()¬†is used to define the input data (i.e¬†mpsz_pop2024) and¬†tm_polygons()¬†is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\nüìí Note: By default, it plots areas of polygons in light gray (gray85) and polygons borders in slightly dark gray (gray25).\n\n\n\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as¬†Dependency¬†to¬†tm_polygons().\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from¬†tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called ‚Äúpretty‚Äù.\nThe default colour scheme used is¬†blues3¬†of ColorBrewer.\nBy default, Missing value will be shaded in grey.\n\n\n\n\nActually,¬†tm_polygons()¬†is a wraper of¬†tm_fill()¬†and¬†tm_border().¬†tm_fill()¬†shades the polygons by using the default colour scheme and¬†tm_borders()¬†adds the borders of the polygon features onto the choropleth map.\nThe code chunk below draws a choropleth map by using¬†tm_fill()¬†alone.\n\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones,¬†tm_borders()¬†will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders()\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe¬†fill_alpha¬†argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside¬†fill_alpha¬†argument, there are three other arguments for¬†tm_borders(), they are:\n\ncol¬†= border colour,\nlwd¬†= border line width. The default is 1, and\nlty¬†= border line type. The default is ‚Äúsolid‚Äù.\n\n\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(col = \"grey60\",\n             lwd = 0.1,\n             lty = \"dashed\")\n\n\n\n\n\n\n\n\n\n\n\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap¬†provides a total ten data classification methods, namely:¬†fixed,¬†sd,¬†equal,¬†pretty¬†(default),¬†quantile,¬†kmeans,¬†hclust,¬†bclust,¬†fisher, and¬†jenks.\nTo define a data classification method, the¬†style¬†argument of¬†tm_fill()¬†or¬†tm_polygons()¬†will be used.\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nIn the code chunk below,¬†equal¬†data classification method is used.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"equal\",\n                n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n\n\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the¬†breaks¬†argument to the¬†tm_scale_intervals(). It is important to note that, in¬†tmap¬†the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the¬†breaks¬†option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of¬†DEPENDENCY¬†field.\n\nsummary(mpsz_pop2024$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1905  0.7450  0.8377  0.8738  0.9366 12.7500      94 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our¬†breaks¬†vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00))) +\n  tm_borders(fill_alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break. They are\nassigned to the highest interval\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap¬†supports colour ramps either defined by the user or a set of predefined colour ramps from the¬†RColorBrewer¬†package.\n\n\nTo change the colour, we assign the preferred colour to¬†palette¬†argument of¬†values¬†as shown in the code chunk below.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a ‚Äú-‚Äù prefix.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"-brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\nBeside map style,¬†tmap¬†also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below,¬†tm_compass(),¬†tm_scale_bar(),¬†tm_grid()¬†and¬†tm_credit()¬†are used to add compass, scale bar, grid lines and data sources onto the choropleth map.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5)) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scalebar() +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: data.gov.sg & singstat\",\n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\nMap layout refers to the combination of all map elements into a cohensive map. It includes the map background, frame, typography, scale, aspect ratio, margins, and more.\nWe can customize the map layout using the¬†tm_layout()¬†function. In this section, we cover the most often used arguments of this function using the dependency choropleth map as example.\n\n\nIn¬†tmap, several¬†legend¬†options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_pos_auto_in() +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scalebar() +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: data.gov.sg & singstat\",\n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\ntmap¬†allows a wide variety of layout settings to be changed. They can be called by using¬†tmap_style().\nThe code chunk below shows the¬†classic¬†style is used.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"-brewer.greens\")) + \n  tm_borders(fill_alpha = 0.5) + \n  tmap_style(\"natural\")\n\nstyle set to \"natural\"\n\n\nother available styles are: \"white\" (tmap default), \"gray\", \"cobalt\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\"\n\n\ntmap v3 styles: \"v3\" (tmap v3 default), \"gray_v3\", \"natural_v3\", \"cobalt_v3\", \"albatross_v3\", \"beaver_v3\", \"bw_v3\", \"classic_v3\", \"watercolor_v3\"\n\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code: ‚Äò‚Äôtmap_style(‚Äúwhite‚Äù)‚Äô‚Äô"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Small multiple maps, also referred to as¬†facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn¬†tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby creating multiple stand-alone maps with¬†tmap_arrange(), and\nby defining a group-by variable in¬†tm_facets().\n\n\n\nIn this example, small multiple choropleth maps are created by assigning two variables to the visual variable (i.e.¬†fill).\n\ntm_shape(mpsz_pop2024) + \n  tm_polygons(\n    fill = c(\"YOUNG\", \"AGED\"),\n    fill.legend = \n      tm_legend(position = tm_pos_in(\n        \"right\", \"bottom\")),\n    fill.scale = tm_scale_intervals(\n      style = \"equal\", \n      n = 5,\n      values = \"brewer.blues\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tmap_style(\"natural\")\n\nstyle set to \"natural\"\n\n\nother available styles are: \"white\" (tmap default), \"gray\", \"cobalt\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\"\n\n\ntmap v3 styles: \"v3\" (tmap v3 default), \"gray_v3\", \"natural_v3\", \"cobalt_v3\", \"albatross_v3\", \"beaver_v3\", \"bw_v3\", \"classic_v3\", \"watercolor_v3\"\n\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple choropleth maps are created and¬†tmap_arrnage()¬†is used to arrnage them in a grid layout.\n\nyoungmap &lt;- tm_shape(mpsz_pop2024)+ \n  tm_polygons(fill = \"YOUNG\",\n              fill.legend = tm_legend(\n                position = tm_pos_in(\n                  \"right\", \"bottom\"),\n                  item.height = 0.8),\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                values = \"brewer.blues\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of young population\")\n                \nagedmap &lt;- tm_shape(mpsz_pop2024)+ \n  tm_polygons(fill = \"AGED\",\n              fill.legend = tm_legend(\n                position = tm_pos_in(\n                  \"right\", \"bottom\"),\n                item.height = 0.8),\n              fill.scale = tm_scale_intervals(\n              style = \"quantile\", \n              values = \"brewer.blues\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of aged population\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using¬†tm_facets().\n\ntm_shape(mpsz_pop2024) +\n  tm_fill(fill = \"DEPENDENCY\",\n          fill.scale = tm_scale_intervals(\n            style = \"quantile\",\n            values = \"brewer.blues\")) + \n  tm_facets(by = \"REGION_N\",\n            nrow = 2, \n            ncols = 3,\n            free.coords=TRUE, \n            drop.units=TRUE) +\n  tm_layout(legend.show = TRUE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(fill_alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#mappping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#mappping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Instead of creating small multiple choropleth map, you can also use¬†filter()¬†of¬†dplyr¬†package to select geographical area of interest and plot a choropleth map focus only on the selected region.\n\nmpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\") %&gt;%\n  tm_shape() +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                values = \"brewer.greens\"),\n              fill.legend = tm_legend()) +\n  tm_borders(fill_alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#complementing-thematic-map-with-statistical-chart",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#complementing-thematic-map-with-statistical-chart",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Maps and statistical charts complement each other by visually representing different aspects of the same data, offering a more comprehensive understanding. Maps excel at showing spatial relationships and geographical patterns, while charts effectively display numerical data, trends, and comparisons. Combining both allows for a more insightful and engaging data narrative, especially when dealing with spatial data that also has quantifiable characteristics.\nWith tmap, statistical chart and be incorporate into the map visualisation by using¬†fill.chat¬†argument of map layers and¬†legend chart¬†feature as shown in the code chunk below.\n\nmpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\") %&gt;%\n  tm_shape() +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                values = \"brewer.greens\"),\n              fill.legend = tm_legend(),\n              fill.chart = tm_chart_box()) +\n  tm_borders() +\n  tm_layout(asp = 0.8)\n\n\n\n\n\n\n\n\nIn the code chunk below, We improve the visual representation further by highlighting and lebaling the outliers on the choropleth map.\n\nmpsz_selected &lt;- mpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\")\n\nstats &lt;- boxplot.stats(mpsz_selected$DEPENDENCY)\n\noutlier_vals &lt;- stats$out\n\noutlier_sf &lt;- mpsz_selected[mpsz_selected$DEPENDENCY %in% outlier_vals, ]\n\ntm_shape(mpsz_selected) +\n  tm_polygons(fill = \"DEPENDENCY\",\n          fill.scale = tm_scale_intervals(\n            style = \"quantile\", \n            values = \"brewer.blues\"),\n          fill.legend = tm_legend(),\n          fill.chart = tm_chart_box()) +\n  tm_borders(fill_alpha = 0.5) +\ntm_shape(outlier_sf) +\n  tm_borders(col = \"red\", lwd = 2) +\n  tm_text(\"SUBZONE_N\", col = \"red\", size = 0.7) +\n  tm_layout(asp = 0.8)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#creating-interactive-map",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#creating-interactive-map",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Interactive maps let users actively explore and interact with the data they display. Unlike static maps, you can zoom in and out, pan across areas, click on locations for more information, and even work with data overlays or visualizations‚Äîmaking the experience more dynamic and informative. One of the great things about tmap is that it lets you switch easily between static and interactive maps using¬†tmap_mode(), so you can choose the view that best suits your analysis.\nBy modifying the code chunk in sub-section 2.6, the code chunks below build an interactive map using:\n\nregion_selected &lt;- mpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\")\nregion_bbox &lt;- st_bbox(region_selected)\n\nstats &lt;- boxplot.stats(region_selected$DEPENDENCY)\noutlier_vals &lt;- stats$out\noutlier_sf &lt;- region_selected[region_selected$DEPENDENCY %in% outlier_vals, ]\n\ntmap_mode(\"view\")\n\n‚Ñπ tmap mode set to \"view\".\n\ntm_shape(region_selected, \n         bbox = region_bbox) +\n  tm_fill(\"DEPENDENCY\",\n          id = \"SUBZONE_N\",\n          popup.vars = c(\n            \"Name\" = \"SUBZONE_N\", \n            \"Dependency\" = \"DEPENDENCY\")) +\n  tm_borders() +\n  tm_shape(outlier_sf) +\n  tm_borders(col = \"red\", lwd = 2)\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n‚Ñπ tmap mode set to \"plot\".\n\n\nThe interactive map above is far from satisfactory. While we want to encourage users to engage and explore the interactive by zooming in and out of the study area freely. But, users might lost in the cyberspace with too much freedom to zoom-in and zoom-out.\nTo address this issue,¬†set_zoom_limits¬†argument can be used to limit the map extend users can zooming in and out of the map areas as shown below.\n\nregion_selected &lt;- mpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\")\nregion_bbox &lt;- st_bbox(region_selected)\n\nstats &lt;- boxplot.stats(region_selected$DEPENDENCY)\noutlier_vals &lt;- stats$out\noutlier_sf &lt;- region_selected[region_selected$DEPENDENCY %in% outlier_vals, ]\n\ntmap_mode(\"view\")\n\n‚Ñπ tmap mode set to \"view\".\n\ntm_shape(region_selected, \n         bbox = region_bbox) +\n  tm_fill(\"DEPENDENCY\",\n          id = \"SUBZONE_N\",\n          popup.vars = c(\n            \"Name\" = \"SUBZONE_N\", \n            \"Dependency\" = \"DEPENDENCY\")) +\n  tm_borders() +\n  tm_shape(outlier_sf) +\n  tm_borders(col = \"red\", lwd = 2) +\n  tm_view(set_zoom_limits = c(12,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n‚Ñπ tmap mode set to \"plot\"."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on Exercise02.html#reference",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "tmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‚Äòspread()‚Äô and ‚Äògather()‚Äô Functions\n\n\n\n\nKam, K. (2022). Thematic Mapping and GeoVisualisation with R. R4GDSA Lecture Notes, Chapter 2."
  }
]